// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password      String
  name          String?
  bio           String
  hometown      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean   @default(false)
  avatarType    String?
  avatar        Json?
  friend_ids    Int[]
  guesses       Guess[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Venue {
  id        Int     @id @default(autoincrement())
  name      String
  name_abbr String?
  city      String?
  state     String?
  country   String?
  tz_id     String
  tz_name   String?
  runs      Run[]
  shows     Show[]

  @@map("venues")
}

model Run {
  id      Int        @id @default(autoincrement())
  name    String
  slug    String     @unique
  dates   DateTime[] @db.Date
  venueId Int
  venue   Venue      @relation(fields: [venueId], references: [id])
  shows   Show[]

  @@map("runs")
}

model Show {
  id        Int      @id @default(autoincrement())
  runId     Int
  run       Run      @relation(fields: [runId], references: [id])
  runNight  Int
  slug      String   @unique
  date      DateTime @db.Date
  timestamp DateTime @db.Timestamptz
  venueId   Int
  venue     Venue    @relation(fields: [venueId], references: [id])

  @@map("shows")
}

model Guess {
  id        Int     @id @default(autoincrement())
  userId    Int
  songId    String
  songName  String
  showId    Int
  runId     Int
  encore    Boolean @default(false)
  completed Boolean @default(false)
  points    Float   @default(0)
  User      User    @relation(fields: [userId], references: [id])

  @@map("guesses")
}

model Song {
  id          String   @id
  name        String
  averageGap  Float
  points      Float
  tags        String[] @default([])

  @@map("songs")
}
